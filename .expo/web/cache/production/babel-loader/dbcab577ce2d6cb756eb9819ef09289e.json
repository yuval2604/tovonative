{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import UAParser from'ua-parser-js';import uuidv4 from'uuid/v4';var ExpoPackageJson=require('expo/package.json');var parser=new UAParser();var ID_KEY='EXPO_CONSTANTS_INSTALLATION_ID';var _sessionId=uuidv4();export default{get name(){return'ExponentConstants';},get appOwnership(){return'expo';},get installationId(){var installationId;try{installationId=localStorage.getItem(ID_KEY);if(installationId==null||typeof installationId!=='string'){installationId=uuidv4();localStorage.setItem(ID_KEY,installationId);}}catch(error){installationId=_sessionId;}finally{return installationId;}},get sessionId(){return _sessionId;},get platform(){return{web:UAParser(navigator.userAgent)};},get isHeadless(){return false;},get isDevice(){return true;},get isDetached(){return false;},get expoVersion(){return ExpoPackageJson.version;},get linkingUri(){return location.origin+location.pathname;},get expoRuntimeVersion(){return ExpoPackageJson.version;},get deviceName(){var _parser$getResult=parser.getResult(),browser=_parser$getResult.browser,engine=_parser$getResult.engine,OS=_parser$getResult.os;return browser.name||engine.name||OS.name||undefined;},get nativeAppVersion(){return null;},get nativeBuildVersion(){return null;},get systemFonts(){return[];},get statusBarHeight(){return 0;},get deviceYearClass(){return null;},get manifest(){return process.env.APP_MANIFEST||{};},get experienceUrl(){return location.origin+location.pathname;},get debugMode(){return __DEV__;},getWebViewUserAgentAsync:function getWebViewUserAgentAsync(){return _regeneratorRuntime.async(function getWebViewUserAgentAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",navigator.userAgent);case 1:case\"end\":return _context.stop();}}});}};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"4DAAA,MAAO,CAAA,QAAP,KAAqB,cAArB,CACA,MAAO,CAAA,MAAP,KAAmB,SAAnB,CAGA,GAAM,CAAA,eAAe,CAAG,OAAO,CAAC,mBAAD,CAA/B,CAEA,GAAM,CAAA,MAAM,CAAG,GAAI,CAAA,QAAJ,EAAf,CACA,GAAM,CAAA,MAAM,CAAG,gCAAf,CAQA,GAAM,CAAA,UAAU,CAAG,MAAM,EAAzB,CAEA,cAAe,CACb,GAAI,CAAA,IAAJ,EAAQ,CACN,MAAO,mBAAP,CACD,CAHY,CAIb,GAAI,CAAA,YAAJ,EAAgB,CACd,MAAO,MAAP,CACD,CANY,CAOb,GAAI,CAAA,cAAJ,EAAkB,CAChB,GAAI,CAAA,cAAJ,CACA,GAAI,CACF,cAAc,CAAG,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAjB,CACA,GAAI,cAAc,EAAI,IAAlB,EAA0B,MAAO,CAAA,cAAP,GAA0B,QAAxD,CAAkE,CAChE,cAAc,CAAG,MAAM,EAAvB,CACA,YAAY,CAAC,OAAb,CAAqB,MAArB,CAA6B,cAA7B,EACD,CACF,CAAC,MAAO,KAAP,CAAc,CACd,cAAc,CAAG,UAAjB,CACD,CARD,OAQU,CACR,MAAO,CAAA,cAAP,CACD,CACF,CApBY,CAqBb,GAAI,CAAA,SAAJ,EAAa,CACX,MAAO,CAAA,UAAP,CACD,CAvBY,CAwBb,GAAI,CAAA,QAAJ,EAAY,CACV,MAAO,CAAE,GAAG,CAAE,QAAQ,CAAC,SAAS,CAAC,SAAX,CAAf,CAAP,CACD,CA1BY,CA2Bb,GAAI,CAAA,UAAJ,EAAc,CACZ,MAAO,MAAP,CACD,CA7BY,CA8Bb,GAAI,CAAA,QAAJ,EAAY,CAEV,MAAO,KAAP,CACD,CAjCY,CAkCb,GAAI,CAAA,UAAJ,EAAc,CACZ,MAAO,MAAP,CACD,CApCY,CAqCb,GAAI,CAAA,WAAJ,EAAe,CACb,MAAO,CAAA,eAAe,CAAC,OAAvB,CACD,CAvCY,CAwCb,GAAI,CAAA,UAAJ,EAAc,CAEZ,MAAO,CAAA,QAAQ,CAAC,MAAT,CAAkB,QAAQ,CAAC,QAAlC,CACD,CA3CY,CA4Cb,GAAI,CAAA,kBAAJ,EAAsB,CACpB,MAAO,CAAA,eAAe,CAAC,OAAvB,CACD,CA9CY,CA+Cb,GAAI,CAAA,UAAJ,EAAc,uBACwB,MAAM,CAAC,SAAP,EADxB,CACJ,OADI,mBACJ,OADI,CACK,MADL,mBACK,MADL,CACiB,EADjB,mBACa,EADb,CAGZ,MAAO,CAAA,OAAO,CAAC,IAAR,EAAgB,MAAM,CAAC,IAAvB,EAA+B,EAAE,CAAC,IAAlC,EAA0C,SAAjD,CACD,CAnDY,CAoDb,GAAI,CAAA,gBAAJ,EAAoB,CAClB,MAAO,KAAP,CACD,CAtDY,CAuDb,GAAI,CAAA,kBAAJ,EAAsB,CACpB,MAAO,KAAP,CACD,CAzDY,CA0Db,GAAI,CAAA,WAAJ,EAAe,CAEb,MAAO,EAAP,CACD,CA7DY,CA8Db,GAAI,CAAA,eAAJ,EAAmB,CACjB,MAAO,EAAP,CACD,CAhEY,CAiEb,GAAI,CAAA,eAAJ,EAAmB,CAEjB,MAAO,KAAP,CACD,CApEY,CAqEb,GAAI,CAAA,QAAJ,EAAY,CACV,MAAO,CAAA,OAAO,CAAC,GAAR,CAAY,YAAZ,EAA4B,EAAnC,CACD,CAvEY,CAwEb,GAAI,CAAA,aAAJ,EAAiB,CACf,MAAO,CAAA,QAAQ,CAAC,MAAT,CAAkB,QAAQ,CAAC,QAAlC,CACD,CA1EY,CA2Eb,GAAI,CAAA,SAAJ,EAAa,CACX,MAAO,CAAA,OAAP,CACD,CA7EY,CA8EP,wBA9EO,uMA+EJ,SAAS,CAAC,SA/EN,iDAAf","sourcesContent":["import UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    // On native this is `exp://`\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    return location.origin + location.pathname;\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}