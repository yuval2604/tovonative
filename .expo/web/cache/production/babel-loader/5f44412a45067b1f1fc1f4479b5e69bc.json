{"ast":null,"code":"function emptyFunction(){}var AccessibilityInfo={fetch:function fetch(){return new Promise(function(resolve,reject){resolve(true);});},addEventListener:function addEventListener(eventName,handler){return{remove:emptyFunction};},setAccessibilityFocus:function setAccessibilityFocus(reactTag){},announceForAccessibility:function announceForAccessibility(announcement){},removeEventListener:function removeEventListener(eventName,handler){return;}};export default AccessibilityInfo;","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["emptyFunction","AccessibilityInfo","fetch","Promise","resolve","reject","addEventListener","eventName","handler","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","removeEventListener"],"mappings":"AAQA,QAASA,CAAAA,aAAT,EAAyB,CAAE,CAE3B,GAAIC,CAAAA,iBAAiB,CAAG,CAOtBC,KAAK,CAAE,QAASA,CAAAA,KAAT,EAAiB,CACtB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAAUC,OAAV,CAAmBC,MAAnB,CAA2B,CAC5CD,OAAO,CAAC,IAAD,CAAP,CACD,CAFM,CAAP,CAGD,CAXqB,CAgBtBE,gBAAgB,CAAE,QAASA,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqCC,OAArC,CAA8C,CAC9D,MAAO,CACLC,MAAM,CAAET,aADH,CAAP,CAGD,CApBqB,CAyBtBU,qBAAqB,CAAE,QAASA,CAAAA,qBAAT,CAA+BC,QAA/B,CAAyC,CAAE,CAzB5C,CA8BtBC,wBAAwB,CAAE,QAASA,CAAAA,wBAAT,CAAkCC,YAAlC,CAAgD,CAAE,CA9BtD,CAmCtBC,mBAAmB,CAAE,QAASA,CAAAA,mBAAT,CAA6BP,SAA7B,CAAwCC,OAAxC,CAAiD,CACpE,OACD,CArCqB,CAAxB,CAuCA,cAAeP,CAAAA,iBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction emptyFunction() {}\n\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}