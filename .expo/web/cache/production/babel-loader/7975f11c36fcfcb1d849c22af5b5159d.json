{"ast":null,"code":"'use strict';import invariant from'fbjs/lib/invariant';import isEmpty from\"../isEmpty\";import warning from'fbjs/lib/warning';function defaultGetRowData(dataBlob,sectionID,rowID){return dataBlob[sectionID][rowID];}function defaultGetSectionHeaderData(dataBlob,sectionID){return dataBlob[sectionID];}var ListViewDataSource=function(){function ListViewDataSource(params){invariant(params&&typeof params.rowHasChanged==='function','Must provide a rowHasChanged function.');this._rowHasChanged=params.rowHasChanged;this._getRowData=params.getRowData||defaultGetRowData;this._sectionHeaderHasChanged=params.sectionHeaderHasChanged;this._getSectionHeaderData=params.getSectionHeaderData||defaultGetSectionHeaderData;this._dataBlob=null;this._dirtyRows=[];this._dirtySections=[];this._cachedRowCount=0;this.rowIdentities=[];this.sectionIdentities=[];}var _proto=ListViewDataSource.prototype;_proto.cloneWithRows=function cloneWithRows(dataBlob,rowIdentities){var rowIds=rowIdentities?[[].concat(rowIdentities)]:null;if(!this._sectionHeaderHasChanged){this._sectionHeaderHasChanged=function(){return false;};}return this.cloneWithRowsAndSections({s1:dataBlob},['s1'],rowIds);};_proto.cloneWithRowsAndSections=function cloneWithRowsAndSections(dataBlob,sectionIdentities,rowIdentities){invariant(typeof this._sectionHeaderHasChanged==='function','Must provide a sectionHeaderHasChanged function with section data.');invariant(!sectionIdentities||!rowIdentities||sectionIdentities.length===rowIdentities.length,'row and section ids lengths must be the same');var newSource=new ListViewDataSource({getRowData:this._getRowData,getSectionHeaderData:this._getSectionHeaderData,rowHasChanged:this._rowHasChanged,sectionHeaderHasChanged:this._sectionHeaderHasChanged});newSource._dataBlob=dataBlob;if(sectionIdentities){newSource.sectionIdentities=sectionIdentities;}else{newSource.sectionIdentities=Object.keys(dataBlob);}if(rowIdentities){newSource.rowIdentities=rowIdentities;}else{newSource.rowIdentities=[];newSource.sectionIdentities.forEach(function(sectionID){newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));});}newSource._cachedRowCount=countRows(newSource.rowIdentities);newSource._calculateDirtyArrays(this._dataBlob,this.sectionIdentities,this.rowIdentities);return newSource;};_proto.getRowCount=function getRowCount(){return this._cachedRowCount;};_proto.getRowAndSectionCount=function getRowAndSectionCount(){return this._cachedRowCount+this.sectionIdentities.length;};_proto.rowShouldUpdate=function rowShouldUpdate(sectionIndex,rowIndex){var needsUpdate=this._dirtyRows[sectionIndex][rowIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section, row: '+sectionIndex+', '+rowIndex);return needsUpdate;};_proto.getRowData=function getRowData(sectionIndex,rowIndex){var sectionID=this.sectionIdentities[sectionIndex];var rowID=this.rowIdentities[sectionIndex][rowIndex];warning(sectionID!==undefined&&rowID!==undefined,'rendering invalid section, row: '+sectionIndex+', '+rowIndex);return this._getRowData(this._dataBlob,sectionID,rowID);};_proto.getRowIDForFlatIndex=function getRowIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.rowIdentities[ii][accessIndex];}}return null;};_proto.getSectionIDForFlatIndex=function getSectionIDForFlatIndex(index){var accessIndex=index;for(var ii=0;ii<this.sectionIdentities.length;ii++){if(accessIndex>=this.rowIdentities[ii].length){accessIndex-=this.rowIdentities[ii].length;}else{return this.sectionIdentities[ii];}}return null;};_proto.getSectionLengths=function getSectionLengths(){var results=[];for(var ii=0;ii<this.sectionIdentities.length;ii++){results.push(this.rowIdentities[ii].length);}return results;};_proto.sectionHeaderShouldUpdate=function sectionHeaderShouldUpdate(sectionIndex){var needsUpdate=this._dirtySections[sectionIndex];warning(needsUpdate!==undefined,'missing dirtyBit for section: '+sectionIndex);return needsUpdate;};_proto.getSectionHeaderData=function getSectionHeaderData(sectionIndex){if(!this._getSectionHeaderData){return null;}var sectionID=this.sectionIdentities[sectionIndex];warning(sectionID!==undefined,'renderSection called on invalid section: '+sectionIndex);return this._getSectionHeaderData(this._dataBlob,sectionID);};_proto._calculateDirtyArrays=function _calculateDirtyArrays(prevDataBlob,prevSectionIDs,prevRowIDs){var prevSectionsHash=keyedDictionaryFromArray(prevSectionIDs);var prevRowsHash={};for(var ii=0;ii<prevRowIDs.length;ii++){var sectionID=prevSectionIDs[ii];warning(!prevRowsHash[sectionID],'SectionID appears more than once: '+sectionID);prevRowsHash[sectionID]=keyedDictionaryFromArray(prevRowIDs[ii]);}this._dirtySections=[];this._dirtyRows=[];var dirty;for(var sIndex=0;sIndex<this.sectionIdentities.length;sIndex++){var sectionID=this.sectionIdentities[sIndex];dirty=!prevSectionsHash[sectionID];var sectionHeaderHasChanged=this._sectionHeaderHasChanged;if(!dirty&&sectionHeaderHasChanged){dirty=sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob,sectionID),this._getSectionHeaderData(this._dataBlob,sectionID));}this._dirtySections.push(!!dirty);this._dirtyRows[sIndex]=[];for(var rIndex=0;rIndex<this.rowIdentities[sIndex].length;rIndex++){var rowID=this.rowIdentities[sIndex][rIndex];dirty=!prevSectionsHash[sectionID]||!prevRowsHash[sectionID][rowID]||this._rowHasChanged(this._getRowData(prevDataBlob,sectionID,rowID),this._getRowData(this._dataBlob,sectionID,rowID));this._dirtyRows[sIndex].push(!!dirty);}}};return ListViewDataSource;}();function countRows(allRowIDs){var totalRows=0;for(var sectionIdx=0;sectionIdx<allRowIDs.length;sectionIdx++){var rowIDs=allRowIDs[sectionIdx];totalRows+=rowIDs.length;}return totalRows;}function keyedDictionaryFromArray(arr){if(isEmpty(arr)){return{};}var result={};for(var ii=0;ii<arr.length;ii++){var key=arr[ii];warning(!result[key],'Value appears more than once in array: '+key);result[key]=true;}return result;}export default ListViewDataSource;","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-native-web/dist/vendor/react-native/ListView/ListViewDataSource.js"],"names":["invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","_proto","prototype","cloneWithRows","rowIds","concat","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListViewDataSource\n * \n * @format\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\nvar ListViewDataSource =\n/*#__PURE__*/\nfunction () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0; // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  var _proto = ListViewDataSource.prototype;\n\n  _proto.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  }\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n  ;\n\n  _proto.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  }\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n  ;\n\n  _proto.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  }\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n  ;\n\n  _proto.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  }\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  ;\n\n  _proto.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  }\n  /**\n   * Gets the data required to render the row.\n   */\n  ;\n\n  _proto.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  }\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n  ;\n\n  _proto.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n  ;\n\n  _proto.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n  ;\n\n  _proto.getSectionLengths = function getSectionLengths() {\n    var results = [];\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n\n    return results;\n  }\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n  ;\n\n  _proto.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  }\n  /**\n   * Gets the data required to render the section header\n   */\n  ;\n\n  _proto.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  }\n  /**\n   * Private members and methods.\n   */\n  ;\n\n  _proto._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    } // compare the 2 identity array and get the dirtied rows\n\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex]; // dirty if the sectionHeader is new or _sectionHasChanged is true\n\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex]; // dirty if the section is new, row is new or _rowHasChanged is true\n\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n}\n\nexport default ListViewDataSource;"]},"metadata":{},"sourceType":"module"}