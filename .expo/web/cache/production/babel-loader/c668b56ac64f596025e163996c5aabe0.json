{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{polyfill}from'react-lifecycles-compat';import{ScreenContainer}from'react-native-screens';import createTabNavigator from\"../utils/createTabNavigator\";import BottomTabBar from\"../views/BottomTabBar\";import ResourceSavingScene from\"../views/ResourceSavingScene\";var TabNavigationView=function(_React$PureComponent){_inherits(TabNavigationView,_React$PureComponent);function TabNavigationView(){var _getPrototypeOf2;var _this;_classCallCheck(this,TabNavigationView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TabNavigationView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={loaded:[_this.props.navigation.state.index]};_this._renderTabBar=function(){var _this$props=_this.props,_this$props$tabBarCom=_this$props.tabBarComponent,TabBarComponent=_this$props$tabBarCom===void 0?BottomTabBar:_this$props$tabBarCom,tabBarOptions=_this$props.tabBarOptions,navigation=_this$props.navigation,screenProps=_this$props.screenProps,getLabelText=_this$props.getLabelText,getAccessibilityLabel=_this$props.getAccessibilityLabel,getButtonComponent=_this$props.getButtonComponent,getAccessibilityRole=_this$props.getAccessibilityRole,getAccessibilityStates=_this$props.getAccessibilityStates,getTestID=_this$props.getTestID,renderIcon=_this$props.renderIcon,onTabPress=_this$props.onTabPress,onTabLongPress=_this$props.onTabLongPress;var descriptors=_this.props.descriptors;var state=_this.props.navigation.state;var route=state.routes[state.index];var descriptor=descriptors[route.key];var options=descriptor.options;if(options.tabBarVisible===false){return null;}return React.createElement(TabBarComponent,_extends({},tabBarOptions,{jumpTo:_this._jumpTo,navigation:navigation,screenProps:screenProps,onTabPress:onTabPress,onTabLongPress:onTabLongPress,getLabelText:getLabelText,getButtonComponent:getButtonComponent,getAccessibilityLabel:getAccessibilityLabel,getAccessibilityRole:getAccessibilityRole,getAccessibilityStates:getAccessibilityStates,getTestID:getTestID,renderIcon:renderIcon}));};_this._jumpTo=function(key){var _this$props2=_this.props,navigation=_this$props2.navigation,onIndexChange=_this$props2.onIndexChange;var index=navigation.state.routes.findIndex(function(route){return route.key===key;});onIndexChange(index);};return _this;}_createClass(TabNavigationView,[{key:\"render\",value:function render(){var _this$props3=this.props,navigation=_this$props3.navigation,renderScene=_this$props3.renderScene,lazy=_this$props3.lazy;var routes=navigation.state.routes;var loaded=this.state.loaded;return React.createElement(View,{style:styles.container},React.createElement(ScreenContainer,{style:styles.pages},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;return React.createElement(ResourceSavingScene,{key:route.key,style:StyleSheet.absoluteFill,isVisible:isFocused},renderScene({route:route}));})),this._renderTabBar());}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat(_toConsumableArray(prevState.loaded),[index])};}}]);return TabNavigationView;}(React.PureComponent);TabNavigationView.defaultProps={lazy:true,getAccessibilityRole:function getAccessibilityRole(){return'button';},getAccessibilityStates:function getAccessibilityStates(_ref){var focused=_ref.focused;return focused?['selected']:[];}};polyfill(TabNavigationView);var styles=StyleSheet.create({container:{flex:1,overflow:'hidden'},pages:{flex:1}});export default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js"],"names":["React","polyfill","ScreenContainer","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","nextProps","prevState","PureComponent","defaultProps","focused","create","flex","overflow"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar, { type TabBarOptions } from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  getAccessibilityRole: (props: { route: any }) => string,\n  getAccessibilityStates: (props: { route: any }) => Array<string>,\n  lazy?: boolean,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n};\n\ntype State = {\n  loaded: number[],\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: () => 'button',\n    getAccessibilityStates: ({ focused }) => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator(TabNavigationView);\n"]},"metadata":{},"sourceType":"module"}