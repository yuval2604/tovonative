{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import _ from'lodash';function capitalizeFirstLetter(value){return value.charAt(0).toUpperCase()+value.slice(1);}export function createVariations(baseName,nameSuffixes,key,value){return _.reduce(nameSuffixes,function(result,variant){var variantName=variant?baseName+\"-\"+variant:baseName;var keyName=variant?\"\"+key+capitalizeFirstLetter(variant):key;result[variantName]=_defineProperty({},keyName,value);return result;},{});}export function createSharedStyle(componentNames){var sharedStyle=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var customStyles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return _.reduce(componentNames,function(result,componentName){result[componentName]=_objectSpread({},sharedStyle,{},customStyles[componentName]);return result;},{});}","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/native-base-shoutem-theme/src/addons.js"],"names":["_","capitalizeFirstLetter","value","charAt","toUpperCase","slice","createVariations","baseName","nameSuffixes","key","reduce","result","variant","variantName","keyName","createSharedStyle","componentNames","sharedStyle","customStyles","componentName"],"mappings":"+1BAAA,MAAOA,CAAAA,CAAP,KAAc,QAAd,CAEA,QAASC,CAAAA,qBAAT,CAA+BC,KAA/B,CAAsC,CACpC,MAAOA,CAAAA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,GAAgCF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAvC,CACD,CAiCD,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,QAA1B,CAAoCC,YAApC,CAAkDC,GAAlD,CAAuDP,KAAvD,CAA8D,CACnE,MAAOF,CAAAA,CAAC,CAACU,MAAF,CAASF,YAAT,CAAuB,SAACG,MAAD,CAASC,OAAT,CAAqB,CACjD,GAAMC,CAAAA,WAAW,CAAGD,OAAO,CAAML,QAAN,KAAkBK,OAAlB,CAA8BL,QAAzD,CACA,GAAMO,CAAAA,OAAO,CAAGF,OAAO,IAAMH,GAAN,CAAYR,qBAAqB,CAACW,OAAD,CAAjC,CAA+CH,GAAtE,CAGAE,MAAM,CAACE,WAAD,CAAN,oBACGC,OADH,CACaZ,KADb,EAIA,MAAOS,CAAAA,MAAP,CACD,CAVM,CAUJ,EAVI,CAAP,CAWD,CAiCD,MAAO,SAASI,CAAAA,iBAAT,CAA2BC,cAA3B,CAAgF,IAArCC,CAAAA,WAAqC,2DAAvB,EAAuB,IAAnBC,CAAAA,YAAmB,2DAAJ,EAAI,CACrF,MAAOlB,CAAAA,CAAC,CAACU,MAAF,CAASM,cAAT,CAAyB,SAACL,MAAD,CAASQ,aAAT,CAA2B,CAEzDR,MAAM,CAACQ,aAAD,CAAN,kBACKF,WADL,IAEKC,YAAY,CAACC,aAAD,CAFjB,EAKA,MAAOR,CAAAA,MAAP,CACD,CARM,CAQJ,EARI,CAAP,CASD","sourcesContent":["import _ from 'lodash';\n\nfunction capitalizeFirstLetter(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * Creates a set of style variations with the provided name\n * suffixes. This function is useful when creating style variations\n * for styles with shorthands, e.g., margin, padding, etc. This function\n * will return an object with the keys that represent the style variations,\n * and each key will have an object with the provided key and value. Both\n * style variation, and value object keys will get the provided suffixes. The\n * style variation key names are expected to be in snake-case, and value keys\n * are expected to be in camelCase.\n *\n * Example:\n * createVariations('large-margin', ['', 'left', 'right'], 'margin', 30)\n * will return:\n * {\n *   'large-margin': {\n *     margin: 30\n *   },\n *   'large-margin-left': {\n *     marginLeft: 30,\n *   },\n *   'large-margin-right': {\n *     marginRight: 30,\n *   }\n * }\n *\n * @param baseName Base name for style variation Â§names.\n * @param nameSuffixes Suffixes that will be concatenated to baseName.\n * @param key The value key name to use.\n * @param value The value that will be assigned to the key property.\n * @returns {object} An object with the generated style variants.\n */\nexport function createVariations(baseName, nameSuffixes, key, value) {\n  return _.reduce(nameSuffixes, (result, variant) => {\n    const variantName = variant ? `${baseName}-${variant}` : baseName;\n    const keyName = variant ? `${key}${capitalizeFirstLetter(variant)}` : key;\n\n    // eslint-disable-next-line no-param-reassign\n    result[variantName] = {\n      [keyName]: value,\n    };\n\n    return result;\n  }, {});\n}\n\n/**\n * Creates a set of style rules for the provided components. This function\n * is useful when a set of components needs to have the same style. The\n * shared style will be applied to each component. It is also possible to\n * provide custom style for each component that will be applied on top of\n * the shared style.\n *\n * Example:\n * createSharedStyle(['shoutem.ui.Text', 'shoutem.ui.Title'], {\n *   color: 'white'\n * }, {\n *   'shoutem.ui.Title: {\n *     marginBottom: 15\n *   }\n * );\n * will return:\n * {\n *   'shoutem.ui.Text': {\n *     color: 'white'\n *   },\n *   'shoutem.ui.Title': {\n *     color: 'white',\n *     marginBottom: 15\n *   }\n * }\n *\n * @param componentNames The names of the components to generate styles for.\n * @param sharedStyle The style to apply to each component.\n * @param customStyles Style overrides by component names.\n * @returns {object} An object with the generated styles.\n */\nexport function createSharedStyle(componentNames, sharedStyle = {}, customStyles = {}) {\n  return _.reduce(componentNames, (result, componentName) => {\n    // eslint-disable-next-line no-param-reassign\n    result[componentName] = {\n      ...sharedStyle,\n      ...customStyles[componentName],\n    };\n\n    return result;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}