{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackView.tsx\";import*as React from'react';import{StackActions}from'@react-navigation/core';import StackViewLayout from\"./StackViewLayout\";import Transitioner from\"../Transitioner\";import TransitionConfigs from\"./StackViewTransitionConfigs\";var USE_NATIVE_DRIVER=true;var DefaultNavigationConfig={mode:'card',cardShadowEnabled:true,cardOverlayEnabled:false};var StackView=function(_React$Component){_inherits(StackView,_React$Component);function StackView(){var _getPrototypeOf2;var _this;_classCallCheck(this,StackView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(StackView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.configureTransition=function(transitionProps,prevTransitionProps){return _objectSpread({useNativeDriver:USE_NATIVE_DRIVER},TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig,transitionProps,prevTransitionProps,_this.props.navigationConfig.mode==='modal').transitionSpec);};_this.getShadowEnabled=function(){var navigationConfig=_this.props.navigationConfig;return navigationConfig&&navigationConfig.hasOwnProperty('cardShadowEnabled')?navigationConfig.cardShadowEnabled:DefaultNavigationConfig.cardShadowEnabled;};_this.getCardOverlayEnabled=function(){var navigationConfig=_this.props.navigationConfig;return navigationConfig&&navigationConfig.hasOwnProperty('cardOverlayEnabled')?navigationConfig.cardOverlayEnabled:DefaultNavigationConfig.cardOverlayEnabled;};_this.renderStackviewLayout=function(transitionProps,lastTransitionProps){var _this$props=_this.props,screenProps=_this$props.screenProps,navigationConfig=_this$props.navigationConfig;return React.createElement(StackViewLayout,_extends({},navigationConfig,{shadowEnabled:_this.getShadowEnabled(),cardOverlayEnabled:_this.getCardOverlayEnabled(),onGestureBegin:_this.props.onGestureBegin,onGestureCanceled:_this.props.onGestureCanceled,onGestureEnd:_this.props.onGestureEnd,screenProps:screenProps,transitionProps:transitionProps,lastTransitionProps:lastTransitionProps,__source:{fileName:_jsxFileName,lineNumber:103}}));};_this.handleTransitionEnd=function(transition,lastTransition){var _this$props2=_this.props,navigationConfig=_this$props2.navigationConfig,navigation=_this$props2.navigation,_this$props2$onTransi=_this$props2.onTransitionEnd,onTransitionEnd=_this$props2$onTransi===void 0?navigationConfig.onTransitionEnd:_this$props2$onTransi;var transitionDestKey=transition.scene.route.key;var isCurrentKey=navigation.state.routes[navigation.state.index].key===transitionDestKey;if(transition.navigation.state.isTransitioning&&isCurrentKey){navigation.dispatch(StackActions.completeTransition({key:navigation.state.key,toChildKey:transitionDestKey}));}onTransitionEnd&&onTransitionEnd(transition,lastTransition);};return _this;}_createClass(StackView,[{key:\"render\",value:function render(){return React.createElement(Transitioner,{render:this.renderStackviewLayout,configureTransition:this.configureTransition,screenProps:this.props.screenProps,navigation:this.props.navigation,descriptors:this.props.descriptors,onTransitionStart:this.props.onTransitionStart||this.props.navigationConfig.onTransitionStart,onTransitionEnd:this.handleTransitionEnd,__source:{fileName:_jsxFileName,lineNumber:40}});}},{key:\"componentDidMount\",value:function componentDidMount(){var navigation=this.props.navigation;if(navigation.state.isTransitioning){navigation.dispatch(StackActions.completeTransition({key:navigation.state.key}));}}}]);return StackView;}(React.Component);export default StackView;","map":{"version":3,"sources":["StackView.tsx"],"names":["USE_NATIVE_DRIVER","DefaultNavigationConfig","mode","cardShadowEnabled","cardOverlayEnabled","StackView","React","Component","navigation","StackActions","key","configureTransition","useNativeDriver","TransitionConfigs","getShadowEnabled","navigationConfig","getCardOverlayEnabled","renderStackviewLayout","screenProps","handleTransitionEnd","onTransitionEnd","transitionDestKey","transition","isCurrentKey","toChildKey"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { StackActions } from '@react-navigation/core';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport {\n  NavigationProp,\n  SceneDescriptor,\n  NavigationConfig,\n  TransitionProps,\n  Scene,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationProp;\n  descriptors: { [key: string]: SceneDescriptor };\n  navigationConfig: NavigationConfig;\n  onTransitionStart?: () => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  screenProps?: unknown;\n};\n\nconst USE_NATIVE_DRIVER = true;\n\n// NOTE(brentvatne): this was previously in defaultProps, but that is deceiving\n// because the entire object will be clobbered by navigationConfig that is\n// passed in.\nconst DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false,\n};\n\nclass StackView extends React.Component<Props> {\n  render() {\n    return (\n      <Transitioner\n        render={this.renderStackviewLayout}\n        configureTransition={this.configureTransition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        onTransitionStart={\n          this.props.onTransitionStart ||\n          this.props.navigationConfig.onTransitionStart\n        }\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n        })\n      );\n    }\n  }\n\n  private configureTransition = (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps\n  ) => {\n    return {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.navigationConfig.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        this.props.navigationConfig.mode === 'modal'\n      ).transitionSpec,\n    };\n  };\n\n  private getShadowEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardShadowEnabled')\n      ? navigationConfig.cardShadowEnabled\n      : DefaultNavigationConfig.cardShadowEnabled;\n  };\n\n  private getCardOverlayEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardOverlayEnabled')\n      ? navigationConfig.cardOverlayEnabled\n      : DefaultNavigationConfig.cardOverlayEnabled;\n  };\n\n  private renderStackviewLayout = (\n    transitionProps: TransitionProps,\n    lastTransitionProps?: TransitionProps\n  ) => {\n    const { screenProps, navigationConfig } = this.props;\n    return (\n      <StackViewLayout\n        {...navigationConfig}\n        shadowEnabled={this.getShadowEnabled()}\n        cardOverlayEnabled={this.getCardOverlayEnabled()}\n        onGestureBegin={this.props.onGestureBegin}\n        onGestureCanceled={this.props.onGestureCanceled}\n        onGestureEnd={this.props.onGestureEnd}\n        screenProps={screenProps}\n        transitionProps={transitionProps}\n        lastTransitionProps={lastTransitionProps}\n      />\n    );\n  };\n\n  private handleTransitionEnd = (\n    transition: { scene: Scene; navigation: NavigationProp },\n    lastTransition?: { scene: Scene; navigation: NavigationProp }\n  ) => {\n    const {\n      navigationConfig,\n      navigation,\n      // @ts-ignore\n      onTransitionEnd = navigationConfig.onTransitionEnd,\n    } = this.props;\n    const transitionDestKey = transition.scene.route.key;\n    const isCurrentKey =\n      navigation.state.routes[navigation.state.index].key === transitionDestKey;\n    if (transition.navigation.state.isTransitioning && isCurrentKey) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey,\n        })\n      );\n    }\n    onTransitionEnd && onTransitionEnd(transition, lastTransition);\n  };\n}\n\nexport default StackView;\n"]},"metadata":{},"sourceType":"module"}