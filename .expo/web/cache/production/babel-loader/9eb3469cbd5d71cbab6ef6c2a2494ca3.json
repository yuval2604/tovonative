{"ast":null,"code":"import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackViewCard.tsx\";import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Platform from\"react-native-web/dist/exports/Platform\";import{Screen}from'react-native-screens';import createPointerEventsContainer from\"./createPointerEventsContainer\";var EPS=1e-5;function getAccessibilityProps(isActive){if(Platform.OS==='ios'){return{accessibilityElementsHidden:!isActive};}else if(Platform.OS==='android'){return{importantForAccessibility:isActive?'yes':'no-hide-descendants'};}else{return{};}}var Card=function(_React$Component){_inherits(Card,_React$Component);function Card(){_classCallCheck(this,Card);return _possibleConstructorReturn(this,_getPrototypeOf(Card).apply(this,arguments));}_createClass(Card,[{key:\"render\",value:function render(){var _this$props=this.props,children=_this$props.children,pointerEvents=_this$props.pointerEvents,style=_this$props.style,position=_this$props.position,transparent=_this$props.transparent,_this$props$scene=_this$props.scene,index=_this$props$scene.index,isActive=_this$props$scene.isActive;var active=Platform.select({web:isActive,default:transparent||isActive?1:position.interpolate({inputRange:[index,index+1-EPS,index+1],outputRange:[1,1,0],extrapolate:'clamp'})});var animatedStyle=this.props.animatedStyle||{};var shadowOpacity=animatedStyle.shadowOpacity,overlayOpacity=animatedStyle.overlayOpacity,containerAnimatedStyle=_objectWithoutProperties(animatedStyle,[\"shadowOpacity\",\"overlayOpacity\"]);var flattenedStyle=StyleSheet.flatten(style)||{};var backgroundColor=flattenedStyle.backgroundColor,screenStyle=_objectWithoutProperties(flattenedStyle,[\"backgroundColor\"]);return React.createElement(Screen,{pointerEvents:pointerEvents,onComponentRef:this.props.onComponentRef,style:[containerAnimatedStyle,screenStyle],active:active,__source:{fileName:_jsxFileName,lineNumber:80}},!transparent&&shadowOpacity?React.createElement(Animated.View,{style:[styles.shadow,{shadowOpacity:shadowOpacity}],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:88}}):null,React.createElement(Animated.View,_extends({},getAccessibilityProps(isActive),{style:[transparent?styles.transparent:styles.card,backgroundColor&&backgroundColor!=='transparent'?{backgroundColor:backgroundColor}:null],__source:{fileName:_jsxFileName,lineNumber:93}}),children),overlayOpacity?React.createElement(Animated.View,{pointerEvents:\"none\",style:[styles.overlay,{opacity:overlayOpacity}],__source:{fileName:_jsxFileName,lineNumber:105}}):null);}}]);return Card;}(React.Component);var styles=StyleSheet.create({card:{flex:1,backgroundColor:'#fff'},overlay:_objectSpread({},StyleSheet.absoluteFillObject,{backgroundColor:'#000'}),shadow:{top:0,left:0,bottom:0,width:3,position:'absolute',backgroundColor:'#fff',shadowOffset:{width:-1,height:1},shadowRadius:5,shadowColor:'#000'},transparent:{flex:1,backgroundColor:'transparent'}});export default createPointerEventsContainer(Card);","map":{"version":3,"sources":["StackViewCard.tsx"],"names":["EPS","Platform","accessibilityElementsHidden","importantForAccessibility","isActive","Card","React","Component","children","pointerEvents","style","position","transparent","index","active","web","default","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","backgroundColor","screenStyle","styles","getAccessibilityProps","opacity","card","flex","overlay","shadow","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor","createPointerEventsContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            transparent ? styles.transparent : styles.card,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[styles.overlay, { opacity: overlayOpacity }]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]},"metadata":{},"sourceType":"module"}