{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as _ from'lodash';export var INCLUDE='@@shoutem.theme/include';function includeSymbolMergeHandler(objVal,srcVal){var newObjVal=objVal;var include;if(srcVal&&srcVal[INCLUDE]){include=newObjVal&&newObjVal[INCLUDE]?[].concat(_toConsumableArray(newObjVal[INCLUDE]),_toConsumableArray(srcVal[INCLUDE])):srcVal[INCLUDE];}if(_.isUndefined(newObjVal)&&_.isPlainObject(srcVal)){var newObj=_.mergeWith({},srcVal,function(o,s){return s;});if(include){newObj[INCLUDE]=include;}return newObj;}if(_.isPlainObject(newObjVal)&&include){newObjVal[INCLUDE]=include;}}export default function resolveIncludes(target){var base=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};function getStyle(styleName){var defaultStyle={};var style=defaultStyle;var baseStyle=base[styleName];if(baseStyle){if(baseStyle[INCLUDE]){throw Error(\"Base style cannot have includes, unexpected include in \"+styleName+\".\");}style=_objectSpread({},baseStyle);}var targetStyle=target[styleName];if(targetStyle){style=_objectSpread({},style,{},targetStyle);}if(style===defaultStyle){console.warn(\"Including unexisting style: \"+styleName);}return style;}function includeNodeStyles(styleNode,processingStyleNames){if(!_.isPlainObject(styleNode)){return styleNode;}var styleNamesToInclude=styleNode[INCLUDE];var stylesToInclude={};if(styleNamesToInclude){if(!_.isArray(styleNamesToInclude)){throw Error('Include should be array');}for(var _iterator=styleNamesToInclude,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _styleName=_ref;if(processingStyleNames.has(_styleName)){throw Error(\"Circular style include, including \"+_styleName);}processingStyleNames.add(_styleName);stylesToInclude=_.mergeWith({},stylesToInclude,includeNodeStyles(getStyle(_styleName),processingStyleNames),includeSymbolMergeHandler);processingStyleNames.delete(_styleName);}}var resultingStyle=_.mergeWith({},stylesToInclude,styleNode,includeSymbolMergeHandler);delete resultingStyle[INCLUDE];for(var _iterator2=_.keys(resultingStyle),_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref2;if(_isArray2){if(_i2>=_iterator2.length)break;_ref2=_iterator2[_i2++];}else{_i2=_iterator2.next();if(_i2.done)break;_ref2=_i2.value;}var _styleName3=_ref2;resultingStyle[_styleName3]=includeNodeStyles(resultingStyle[_styleName3],processingStyleNames);}return resultingStyle;}var processingStyleNames=new Set();return includeNodeStyles(target,processingStyleNames);}","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/native-base-shoutem-theme/src/resolveIncludes.js"],"names":["_","INCLUDE","includeSymbolMergeHandler","objVal","srcVal","newObjVal","include","isUndefined","isPlainObject","newObj","mergeWith","o","s","resolveIncludes","target","base","getStyle","styleName","defaultStyle","style","baseStyle","Error","targetStyle","console","warn","includeNodeStyles","styleNode","processingStyleNames","styleNamesToInclude","stylesToInclude","isArray","has","add","delete","resultingStyle","keys","Set"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nexport const INCLUDE = '@@shoutem.theme/include';\n\n/**\n * Customizer function for lodash mergeWith which handle INCLUDE symbol.\n * Lodash merge/mergeWith functions doesn't merge symbols\n * and we use INCLUDE symbol to define which style we want to include.\n */\n// eslint-disable-next-line consistent-return\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  const newObjVal = objVal;\n  let include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ?\n      [...newObjVal[INCLUDE], ...srcVal[INCLUDE]] : srcVal[INCLUDE];\n  }\n\n  // if objVal doesn't exists create new from source\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    // Copy symbol fix.\n    // { ...srcVal } copies symbol wrong, it adds symbol value to the property defined just after it\n    // Problem example: { SYMBOL: ['Test'], someProp: 10 } => { someProp: ['Test'] }\n    // mergeWith prevents wrong copy because it doesn't iterate trough Symbols so it skips INCLUDE\n    // We do not INCLUDE symbol to be copied actually in this function\n    // because it is copied manually. This whole function is fixing Symbol problems.\n    const newObj = _.mergeWith({}, srcVal, (o, s) => s);\n    // Assigning INCLUDE after object definition to avoid Object.assign when code transpiled.\n    // Object.assign in RN uses polyfill which doesn't copy Symbols that's why INCLUDE symbol\n    // must be set manually after spread.\n    // TODO(Braco) - once Object.assign polyfill is no longer used use commented code bellow\n    // Check if `customizer` is needed still at all after polyfill is removed!\n    // return { ...srcVal, [INCLUDE]: include }; // add new lines for each property\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n    return newObj;\n  }\n\n  // otherwise let lodash default merge (return undefined)\n  // and add INCLUDE to objVal if any in srcVal\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\n/**\n * Recursively include required target styles from target and base root.\n *\n * @param target - styles object containing\n * @param base - additional style object from which target may include style\n */\nexport default function resolveIncludes(target, base = {}) {\n  /**\n   * Include process steps:\n   * 1. Iterate through target object, check if property is object and if it has [INCLUDE]\n   * 2.a. If property is object, repeat process for that object\n   * 2.b. If property is not object leave value as is\n   * 3. Include any [INCLUDE] (required style)\n   *  1. Repeat process for required style (check if it has any [INCLUDE])\n   */\n\n  /**\n   * Merges style from target and base.\n   * Target style overrides base.\n   * @param styleName - style name to include\n   */\n  function getStyle(styleName) {\n    const defaultStyle = {};\n    let style = defaultStyle;\n\n    const baseStyle = base[styleName];\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(`Base style cannot have includes, unexpected include in ${styleName}.`);\n      }\n      style = { ...baseStyle };\n    }\n\n    const targetStyle = target[styleName];\n    if (targetStyle) {\n      style = {\n        ...style,\n        ...targetStyle,\n      };\n    }\n\n    if (style === defaultStyle) {\n      console.warn(`Including unexisting style: ${styleName}`);\n    }\n\n    return style;\n  }\n\n  // Includes all styles required by using the INCLUDE symbol\n  // on the styleNode object level, and recursively calls itself\n  // for all nested style objects. After calling this function, the\n  // styleNode object will be fully processed, i.e., all styles\n  // required by this object, and any of its children will be resolved.\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    // Style names which current style node want to include\n    const styleNamesToInclude = styleNode[INCLUDE];\n\n    let stylesToInclude = {};\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (const styleName of styleNamesToInclude) {\n        if (processingStyleNames.has(styleName)) {\n          throw Error(`Circular style include, including ${styleName}`);\n        }\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith(\n          {},\n          stylesToInclude,\n          includeNodeStyles(getStyle(styleName), processingStyleNames),\n          includeSymbolMergeHandler\n        );\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    const resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n    delete resultingStyle[INCLUDE];\n\n    for (const styleName of _.keys(resultingStyle)) {\n      resultingStyle[styleName] =\n        includeNodeStyles(resultingStyle[styleName], processingStyleNames);\n    }\n    return resultingStyle;\n  }\n\n  // A that holds all style names that are currently\n  // being processed. This is used to detect include\n  // cycles.\n  const processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}\n"]},"metadata":{},"sourceType":"module"}