{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{PropTypes}from\"prop-types\";import resolveIncludes from\"./resolveIncludes\";import mergeComponentAndThemeStyles from\"./mergeComponentAndThemeStyles\";import normalizeStyle from\"./StyleNormalizer/normalizeStyle\";var THEME_STYLE=\"@@shoutem.theme/themeStyle\";var THEME_STYLE_CACHE=\"@@shoutem.theme/themeCachedStyle\";var defaultTheme;var resolveStyle=function resolveStyle(style,baseStyle){return normalizeStyle(resolveIncludes(style,baseStyle));};var Theme=function(){function Theme(themeStyle){_classCallCheck(this,Theme);this[THEME_STYLE]=resolveStyle(themeStyle);this[THEME_STYLE_CACHE]={};}_createClass(Theme,[{key:\"createComponentStyle\",value:function createComponentStyle(componentName,defaultStyle){if(this[THEME_STYLE_CACHE][componentName]){return this[THEME_STYLE_CACHE][componentName];}var componentIncludedStyle=resolveStyle(defaultStyle,this[THEME_STYLE]);this[THEME_STYLE_CACHE][componentName]=mergeComponentAndThemeStyles(componentIncludedStyle,this[THEME_STYLE][componentName],this[THEME_STYLE]);return this[THEME_STYLE_CACHE][componentName];}}],[{key:\"setDefaultThemeStyle\",value:function setDefaultThemeStyle(style){defaultTheme=new Theme(style);}},{key:\"getDefaultTheme\",value:function getDefaultTheme(){if(!defaultTheme){defaultTheme=new Theme({});}return defaultTheme;}}]);return Theme;}();export{Theme as default};export var ThemeShape=PropTypes.shape({createComponentStyle:PropTypes.func.isRequired});","map":{"version":3,"sources":["/Users/user/Documents/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/native-base-shoutem-theme/src/Theme.js"],"names":["PropTypes","resolveIncludes","mergeComponentAndThemeStyles","normalizeStyle","THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","themeStyle","componentName","defaultStyle","componentIncludedStyle","ThemeShape","shape","createComponentStyle","func","isRequired"],"mappings":"gIAAA,OAASA,SAAT,KAA0B,YAA1B,CACA,MAAOC,CAAAA,eAAP,yBACA,MAAOC,CAAAA,4BAAP,sCACA,MAAOC,CAAAA,cAAP,wCAGA,GAAMC,CAAAA,WAAW,CAAG,4BAApB,CACA,GAAMC,CAAAA,iBAAiB,CAAG,kCAA1B,CAEA,GAAIC,CAAAA,YAAJ,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAQC,SAAR,QACnBN,CAAAA,cAAc,CAACF,eAAe,CAACO,KAAD,CAAQC,SAAR,CAAhB,CADK,EAArB,C,GA2BqBC,CAAAA,K,YACnB,eAAYC,UAAZ,CAAwB,6BACtB,KAAKP,WAAL,EAAoBG,YAAY,CAACI,UAAD,CAAhC,CACA,KAAKN,iBAAL,EAA0B,EAA1B,CACD,C,oFAgCoBO,a,CAAeC,Y,CAAc,CAChD,GAAI,KAAKR,iBAAL,EAAwBO,aAAxB,CAAJ,CAA4C,CAC1C,MAAO,MAAKP,iBAAL,EAAwBO,aAAxB,CAAP,CACD,CAED,GAAME,CAAAA,sBAAsB,CAAGP,YAAY,CACzCM,YADyC,CAEzC,KAAKT,WAAL,CAFyC,CAA3C,CAUA,KAAKC,iBAAL,EAAwBO,aAAxB,EAAyCV,4BAA4B,CACnEY,sBADmE,CAEnE,KAAKV,WAAL,EAAkBQ,aAAlB,CAFmE,CAGnE,KAAKR,WAAL,CAHmE,CAArE,CAMA,MAAO,MAAKC,iBAAL,EAAwBO,aAAxB,CAAP,CACD,C,oEAjD2BJ,K,CAAO,CACjCF,YAAY,CAAG,GAAII,CAAAA,KAAJ,CAAUF,KAAV,CAAf,CACD,C,yDAMwB,CACvB,GAAI,CAACF,YAAL,CAAmB,CACjBA,YAAY,CAAG,GAAII,CAAAA,KAAJ,CAAU,EAAV,CAAf,CACD,CAED,MAAOJ,CAAAA,YAAP,CACD,C,4BAvBkBI,K,aA6DrB,MAAO,IAAMK,CAAAA,UAAU,CAAGf,SAAS,CAACgB,KAAV,CAAgB,CACxCC,oBAAoB,CAAEjB,SAAS,CAACkB,IAAV,CAAeC,UADG,CAAhB,CAAnB","sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"]},"metadata":{},"sourceType":"module"}