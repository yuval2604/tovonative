{"ast":null,"code":"'use strict';export default function invariant(condition,format,a,b,c,d,e,f){if(format===undefined){throw new Error('invariant requires an error message argument');}if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}","map":{"version":3,"sources":["/Users/yuvalbeiser/Downloads/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-navigation-drawer/dist/utils/invariant.js"],"names":["invariant","condition","format","a","b","c","d","e","f","undefined","Error","error","args","argIndex","replace","name","framesToPop"],"mappings":"AASA,aAaA,cAAe,SAASA,CAAAA,SAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,CAAsCC,CAAtC,CAAyCC,CAAzC,CAA4CC,CAA5C,CAA+CC,CAA/C,CAAkDC,CAAlD,CAAqDC,CAArD,CAAwD,CACrE,GAAIN,MAAM,GAAKO,SAAf,CAA0B,CACxB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CAED,GAAI,CAACT,SAAL,CAAgB,CACd,GAAIU,CAAAA,KAAJ,CACA,GAAIT,MAAM,GAAKO,SAAf,CAA0B,CACxBE,KAAK,CAAG,GAAID,CAAAA,KAAJ,CAAU,+HAAV,CAAR,CACD,CAFD,IAEO,CACL,GAAIE,CAAAA,IAAI,CAAG,CAACT,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACA,GAAIK,CAAAA,QAAQ,CAAG,CAAf,CACAF,KAAK,CAAG,GAAID,CAAAA,KAAJ,CAAUR,MAAM,CAACY,OAAP,CAAe,KAAf,CAAsB,iBAAMF,CAAAA,IAAI,CAACC,QAAQ,EAAT,CAAV,EAAtB,CAAV,CAAR,CACAF,KAAK,CAACI,IAAN,CAAa,qBAAb,CACD,CAEDJ,KAAK,CAACK,WAAN,CAAoB,CAApB,CACA,KAAML,CAAAA,KAAN,CACD,CACF","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  if (format === undefined) {\n    throw new Error('invariant requires an error message argument');\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}"]},"metadata":{},"sourceType":"module"}