{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/yuvalbeiser/Downloads/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-native-picker-select/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport isEqual from 'lodash.isequal';\nimport { defaultStyles } from \"./styles\";\n\nvar RNPickerSelect = function (_PureComponent) {\n  _inherits(RNPickerSelect, _PureComponent);\n\n  _createClass(RNPickerSelect, null, [{\n    key: \"handlePlaceholder\",\n    value: function handlePlaceholder(_ref) {\n      var placeholder = _ref.placeholder;\n\n      if (isEqual(placeholder, {})) {\n        return [];\n      }\n\n      return [placeholder];\n    }\n  }, {\n    key: \"getSelectedItem\",\n    value: function getSelectedItem(_ref2) {\n      var items = _ref2.items,\n          key = _ref2.key,\n          value = _ref2.value;\n      var idx = items.findIndex(function (item) {\n        if (item.key && key) {\n          return isEqual(item.key, key);\n        }\n\n        return isEqual(item.value, value);\n      });\n\n      if (idx === -1) {\n        idx = 0;\n      }\n\n      return {\n        selectedItem: items[idx] || {},\n        idx: idx\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var items = RNPickerSelect.handlePlaceholder({\n        placeholder: nextProps.placeholder\n      }).concat(nextProps.items);\n      var itemsChanged = !isEqual(prevState.items, items);\n\n      var _RNPickerSelect$getSe = RNPickerSelect.getSelectedItem({\n        items: items,\n        key: nextProps.itemKey,\n        value: nextProps.value\n      }),\n          selectedItem = _RNPickerSelect$getSe.selectedItem,\n          idx = _RNPickerSelect$getSe.idx;\n\n      var selectedItemChanged = !isEqual(nextProps.value, undefined) && !isEqual(prevState.selectedItem, selectedItem);\n\n      if (itemsChanged || selectedItemChanged) {\n        if (selectedItemChanged) {\n          nextProps.onValueChange(selectedItem.value, idx);\n        }\n\n        return _objectSpread({}, itemsChanged ? {\n          items: items\n        } : {}, {}, selectedItemChanged ? {\n          selectedItem: selectedItem\n        } : {});\n      }\n\n      return null;\n    }\n  }]);\n\n  function RNPickerSelect(props) {\n    var _this;\n\n    _classCallCheck(this, RNPickerSelect);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RNPickerSelect).call(this, props));\n    var items = RNPickerSelect.handlePlaceholder({\n      placeholder: props.placeholder\n    }).concat(props.items);\n\n    var _RNPickerSelect$getSe2 = RNPickerSelect.getSelectedItem({\n      items: items,\n      key: props.itemKey,\n      value: props.value\n    }),\n        selectedItem = _RNPickerSelect$getSe2.selectedItem;\n\n    _this.state = {\n      items: items,\n      selectedItem: selectedItem,\n      showPicker: false,\n      animationType: undefined,\n      orientation: 'portrait',\n      doneDepressed: false\n    };\n    _this.onUpArrow = _this.onUpArrow.bind(_assertThisInitialized(_this));\n    _this.onDownArrow = _this.onDownArrow.bind(_assertThisInitialized(_this));\n    _this.onValueChange = _this.onValueChange.bind(_assertThisInitialized(_this));\n    _this.onOrientationChange = _this.onOrientationChange.bind(_assertThisInitialized(_this));\n    _this.setInputRef = _this.setInputRef.bind(_assertThisInitialized(_this));\n    _this.togglePicker = _this.togglePicker.bind(_assertThisInitialized(_this));\n    _this.renderInputAccessoryView = _this.renderInputAccessoryView.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RNPickerSelect, [{\n    key: \"onUpArrow\",\n    value: function onUpArrow() {\n      var onUpArrow = this.props.onUpArrow;\n      this.togglePicker(false, onUpArrow);\n    }\n  }, {\n    key: \"onDownArrow\",\n    value: function onDownArrow() {\n      var onDownArrow = this.props.onDownArrow;\n      this.togglePicker(false, onDownArrow);\n    }\n  }, {\n    key: \"onValueChange\",\n    value: function onValueChange(value, index) {\n      var onValueChange = this.props.onValueChange;\n      onValueChange(value, index);\n      this.setState(function (prevState) {\n        return {\n          selectedItem: prevState.items[index]\n        };\n      });\n    }\n  }, {\n    key: \"onOrientationChange\",\n    value: function onOrientationChange(_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      this.setState({\n        orientation: nativeEvent.orientation\n      });\n    }\n  }, {\n    key: \"setInputRef\",\n    value: function setInputRef(ref) {\n      this.inputRef = ref;\n    }\n  }, {\n    key: \"getPlaceholderStyle\",\n    value: function getPlaceholderStyle() {\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          style = _this$props.style;\n      var selectedItem = this.state.selectedItem;\n\n      if (!isEqual(placeholder, {}) && selectedItem.label === placeholder.label) {\n        return _objectSpread({}, defaultStyles.placeholder, {\n          color: placeholderTextColor\n        }, style.placeholder);\n      }\n\n      return {};\n    }\n  }, {\n    key: \"triggerOpenCloseCallbacks\",\n    value: function triggerOpenCloseCallbacks() {\n      var _this$props2 = this.props,\n          onOpen = _this$props2.onOpen,\n          onClose = _this$props2.onClose;\n      var showPicker = this.state.showPicker;\n\n      if (!showPicker && onOpen) {\n        onOpen();\n      }\n\n      if (showPicker && onClose) {\n        onClose();\n      }\n    }\n  }, {\n    key: \"togglePicker\",\n    value: function togglePicker() {\n      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var postToggleCallback = arguments.length > 1 ? arguments[1] : undefined;\n      var _this$props3 = this.props,\n          modalProps = _this$props3.modalProps,\n          disabled = _this$props3.disabled;\n      var showPicker = this.state.showPicker;\n\n      if (disabled) {\n        return;\n      }\n\n      if (!showPicker) {\n        Keyboard.dismiss();\n      }\n\n      var animationType = modalProps && modalProps.animationType ? modalProps.animationType : 'slide';\n      this.triggerOpenCloseCallbacks();\n      this.setState(function (prevState) {\n        return {\n          animationType: animate ? animationType : undefined,\n          showPicker: !prevState.showPicker\n        };\n      }, function () {\n        if (postToggleCallback) {\n          postToggleCallback();\n        }\n      });\n    }\n  }, {\n    key: \"renderPickerItems\",\n    value: function renderPickerItems() {\n      var items = this.state.items;\n      return items.map(function (item) {\n        return React.createElement(Picker.Item, {\n          label: item.label,\n          value: item.value,\n          key: item.key || item.label,\n          color: item.color,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderInputAccessoryView\",\n    value: function renderInputAccessoryView() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          InputAccessoryView = _this$props4.InputAccessoryView,\n          doneText = _this$props4.doneText,\n          hideDoneBar = _this$props4.hideDoneBar,\n          onUpArrow = _this$props4.onUpArrow,\n          onDownArrow = _this$props4.onDownArrow,\n          onDonePress = _this$props4.onDonePress,\n          style = _this$props4.style,\n          touchableDoneProps = _this$props4.touchableDoneProps;\n      var doneDepressed = this.state.doneDepressed;\n\n      if (hideDoneBar) {\n        return null;\n      }\n\n      if (InputAccessoryView) {\n        return React.createElement(InputAccessoryView, {\n          testID: \"custom_input_accessory_view\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        style: [defaultStyles.modalViewMiddle, style.modalViewMiddle],\n        testID: \"input_accessory_view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        }\n      }, React.createElement(View, {\n        style: [defaultStyles.chevronContainer, style.chevronContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        }\n      }, React.createElement(TouchableOpacity, {\n        activeOpacity: onUpArrow ? 0.5 : 1,\n        onPress: onUpArrow ? this.onUpArrow : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        }\n      }, React.createElement(View, {\n        style: [defaultStyles.chevron, style.chevron, defaultStyles.chevronUp, style.chevronUp, onUpArrow ? [defaultStyles.chevronActive, style.chevronActive] : {}],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        }\n      })), React.createElement(TouchableOpacity, {\n        activeOpacity: onDownArrow ? 0.5 : 1,\n        onPress: onDownArrow ? this.onDownArrow : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        }\n      }, React.createElement(View, {\n        style: [defaultStyles.chevron, style.chevron, defaultStyles.chevronDown, style.chevronDown, onDownArrow ? [defaultStyles.chevronActive, style.chevronActive] : {}],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        }\n      }))), React.createElement(TouchableOpacity, _extends({\n        onPress: function onPress() {\n          _this2.togglePicker(true, onDonePress);\n        },\n        onPressIn: function onPressIn() {\n          _this2.setState({\n            doneDepressed: true\n          });\n        },\n        onPressOut: function onPressOut() {\n          _this2.setState({\n            doneDepressed: false\n          });\n        },\n        hitSlop: {\n          top: 4,\n          right: 4,\n          bottom: 4,\n          left: 4\n        },\n        testID: \"done_button\"\n      }, touchableDoneProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        }\n      }), React.createElement(View, {\n        testID: \"needed_for_touchable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        }\n      }, React.createElement(Text, {\n        testID: \"done_text\",\n        allowFontScaling: false,\n        style: [defaultStyles.done, style.done, doneDepressed ? [defaultStyles.doneDepressed, style.doneDepressed] : {}],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        }\n      }, doneText))));\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      var _this$props5 = this.props,\n          style = _this$props5.style,\n          Icon = _this$props5.Icon;\n\n      if (!Icon) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        testID: \"icon_container\",\n        style: [defaultStyles.iconContainer, style.iconContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        }\n      }, React.createElement(Icon, {\n        testID: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        }\n      }));\n    }\n  }, {\n    key: \"renderTextInputOrChildren\",\n    value: function renderTextInputOrChildren() {\n      var _this$props6 = this.props,\n          children = _this$props6.children,\n          style = _this$props6.style,\n          textInputProps = _this$props6.textInputProps;\n      var selectedItem = this.state.selectedItem;\n      var containerStyle = Platform.OS === 'ios' ? style.inputIOSContainer : style.inputAndroidContainer;\n\n      if (children) {\n        return React.createElement(View, {\n          pointerEvents: \"box-only\",\n          style: containerStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413\n          }\n        }, children);\n      }\n\n      return React.createElement(View, {\n        pointerEvents: \"box-only\",\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        }\n      }, React.createElement(TextInput, _extends({\n        testID: \"text_input\",\n        style: [Platform.OS === 'ios' ? style.inputIOS : style.inputAndroid, this.getPlaceholderStyle()],\n        value: selectedItem.displayValue ? selectedItem.value : selectedItem.label,\n        ref: this.setInputRef,\n        editable: false\n      }, textInputProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        }\n      })), this.renderIcon());\n    }\n  }, {\n    key: \"renderIOS\",\n    value: function renderIOS() {\n      var _this3 = this;\n\n      var _this$props7 = this.props,\n          style = _this$props7.style,\n          modalProps = _this$props7.modalProps,\n          pickerProps = _this$props7.pickerProps,\n          touchableWrapperProps = _this$props7.touchableWrapperProps;\n      var _this$state = this.state,\n          animationType = _this$state.animationType,\n          orientation = _this$state.orientation,\n          selectedItem = _this$state.selectedItem,\n          showPicker = _this$state.showPicker;\n      return React.createElement(View, {\n        style: [defaultStyles.viewContainer, style.viewContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        }\n      }, React.createElement(TouchableOpacity, _extends({\n        testID: \"ios_touchable_wrapper\",\n        onPress: function onPress() {\n          _this3.togglePicker(true);\n        },\n        activeOpacity: 1\n      }, touchableWrapperProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        }\n      }), this.renderTextInputOrChildren()), React.createElement(Modal, _extends({\n        testID: \"ios_modal\",\n        visible: showPicker,\n        transparent: true,\n        animationType: animationType,\n        supportedOrientations: ['portrait', 'landscape'],\n        onOrientationChange: this.onOrientationChange\n      }, modalProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: [defaultStyles.modalViewTop, style.modalViewTop],\n        testID: \"ios_modal_top\",\n        onPress: function onPress() {\n          _this3.togglePicker(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        }\n      }), this.renderInputAccessoryView(), React.createElement(View, {\n        style: [defaultStyles.modalViewBottom, {\n          height: orientation === 'portrait' ? 215 : 162\n        }, style.modalViewBottom],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        }\n      }, React.createElement(Picker, _extends({\n        testID: \"ios_picker\",\n        onValueChange: this.onValueChange,\n        selectedValue: selectedItem.value\n      }, pickerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        }\n      }), this.renderPickerItems()))));\n    }\n  }, {\n    key: \"renderAndroidHeadless\",\n    value: function renderAndroidHeadless() {\n      var _this$props8 = this.props,\n          disabled = _this$props8.disabled,\n          Icon = _this$props8.Icon,\n          style = _this$props8.style,\n          pickerProps = _this$props8.pickerProps,\n          onOpen = _this$props8.onOpen,\n          touchableWrapperProps = _this$props8.touchableWrapperProps;\n      var selectedItem = this.state.selectedItem;\n      return React.createElement(TouchableOpacity, _extends({\n        onPress: onOpen,\n        testID: \"android_touchable_wrapper\",\n        activeOpacity: 1\n      }, touchableWrapperProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        }\n      }), React.createElement(View, {\n        style: style.headlessAndroidContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        }\n      }, this.renderTextInputOrChildren(), React.createElement(Picker, _extends({\n        style: [Icon ? {\n          backgroundColor: 'transparent'\n        } : {}, defaultStyles.headlessAndroidPicker, style.headlessAndroidPicker],\n        testID: \"android_picker_headless\",\n        enabled: !disabled,\n        onValueChange: this.onValueChange,\n        selectedValue: selectedItem.value\n      }, pickerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        }\n      }), this.renderPickerItems())));\n    }\n  }, {\n    key: \"renderAndroidNativePickerStyle\",\n    value: function renderAndroidNativePickerStyle() {\n      var _this$props9 = this.props,\n          disabled = _this$props9.disabled,\n          Icon = _this$props9.Icon,\n          style = _this$props9.style,\n          pickerProps = _this$props9.pickerProps;\n      var selectedItem = this.state.selectedItem;\n      return React.createElement(View, {\n        style: [defaultStyles.viewContainer, style.viewContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        }\n      }, React.createElement(Picker, _extends({\n        style: [Icon ? {\n          backgroundColor: 'transparent'\n        } : {}, style.inputAndroid, this.getPlaceholderStyle()],\n        testID: \"android_picker\",\n        enabled: !disabled,\n        onValueChange: this.onValueChange,\n        selectedValue: selectedItem.value\n      }, pickerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529\n        }\n      }), this.renderPickerItems()), this.renderIcon());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props10 = this.props,\n          children = _this$props10.children,\n          useNativeAndroidPickerStyle = _this$props10.useNativeAndroidPickerStyle;\n\n      if (Platform.OS === 'ios') {\n        return this.renderIOS();\n      }\n\n      if (children || !useNativeAndroidPickerStyle) {\n        return this.renderAndroidHeadless();\n      }\n\n      return this.renderAndroidNativePickerStyle();\n    }\n  }]);\n\n  return RNPickerSelect;\n}(PureComponent);\n\nRNPickerSelect.propTypes = {\n  onValueChange: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.any.isRequired,\n    key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    color: ColorPropType,\n    displayValue: PropTypes.bool\n  })).isRequired,\n  value: PropTypes.any,\n  placeholder: PropTypes.shape({\n    label: PropTypes.string,\n    value: PropTypes.any,\n    key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    color: ColorPropType\n  }),\n  disabled: PropTypes.bool,\n  itemKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.shape({}),\n  children: PropTypes.any,\n  placeholderTextColor: ColorPropType,\n  onOpen: PropTypes.func,\n  useNativeAndroidPickerStyle: PropTypes.bool,\n  hideDoneBar: PropTypes.bool,\n  doneText: PropTypes.string,\n  onDonePress: PropTypes.func,\n  onUpArrow: PropTypes.func,\n  onDownArrow: PropTypes.func,\n  onClose: PropTypes.func,\n  modalProps: PropTypes.shape({}),\n  textInputProps: PropTypes.shape({}),\n  pickerProps: PropTypes.shape({}),\n  touchableDoneProps: PropTypes.shape({}),\n  touchableWrapperProps: PropTypes.shape({}),\n  Icon: PropTypes.func,\n  InputAccessoryView: PropTypes.func\n};\nRNPickerSelect.defaultProps = {\n  value: undefined,\n  placeholder: {\n    label: 'Select an item...',\n    value: null,\n    color: '#9EA0A4'\n  },\n  disabled: false,\n  itemKey: null,\n  style: {},\n  children: null,\n  placeholderTextColor: '#C7C7CD',\n  useNativeAndroidPickerStyle: true,\n  hideDoneBar: false,\n  doneText: 'Done',\n  onDonePress: null,\n  onUpArrow: null,\n  onDownArrow: null,\n  onOpen: null,\n  onClose: null,\n  modalProps: {},\n  textInputProps: {},\n  pickerProps: {},\n  touchableDoneProps: {},\n  touchableWrapperProps: {},\n  Icon: null,\n  InputAccessoryView: null\n};\nexport { RNPickerSelect as default };\nexport { defaultStyles };","map":{"version":3,"sources":["/Users/yuvalbeiser/Downloads/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/node_modules/react-native-picker-select/src/index.js"],"names":["React","PureComponent","PropTypes","isEqual","defaultStyles","RNPickerSelect","placeholder","items","key","value","idx","findIndex","item","selectedItem","nextProps","prevState","handlePlaceholder","concat","itemsChanged","getSelectedItem","itemKey","selectedItemChanged","undefined","onValueChange","props","state","showPicker","animationType","orientation","doneDepressed","onUpArrow","bind","onDownArrow","onOrientationChange","setInputRef","togglePicker","renderInputAccessoryView","index","setState","nativeEvent","ref","inputRef","placeholderTextColor","style","label","color","onOpen","onClose","animate","postToggleCallback","modalProps","disabled","Keyboard","dismiss","triggerOpenCloseCallbacks","map","InputAccessoryView","doneText","hideDoneBar","onDonePress","touchableDoneProps","modalViewMiddle","chevronContainer","chevron","chevronUp","chevronActive","chevronDown","top","right","bottom","left","done","Icon","iconContainer","children","textInputProps","containerStyle","Platform","OS","inputIOSContainer","inputAndroidContainer","inputIOS","inputAndroid","getPlaceholderStyle","displayValue","renderIcon","pickerProps","touchableWrapperProps","viewContainer","renderTextInputOrChildren","modalViewTop","modalViewBottom","height","renderPickerItems","headlessAndroidContainer","backgroundColor","headlessAndroidPicker","useNativeAndroidPickerStyle","renderIOS","renderAndroidHeadless","renderAndroidNativePickerStyle","propTypes","func","isRequired","arrayOf","shape","string","any","oneOfType","number","ColorPropType","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n    ColorPropType,\n    Keyboard,\n    Modal,\n    Picker,\n    Platform,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport isEqual from 'lodash.isequal';\nimport { defaultStyles } from './styles';\n\nexport default class RNPickerSelect extends PureComponent {\n    static propTypes = {\n        onValueChange: PropTypes.func.isRequired,\n        items: PropTypes.arrayOf(\n            PropTypes.shape({\n                label: PropTypes.string.isRequired,\n                value: PropTypes.any.isRequired,\n                key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n                color: ColorPropType,\n                displayValue: PropTypes.bool,\n            })\n        ).isRequired,\n        value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n        placeholder: PropTypes.shape({\n            label: PropTypes.string,\n            value: PropTypes.any,\n            key: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            color: ColorPropType,\n        }),\n        disabled: PropTypes.bool,\n        itemKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        style: PropTypes.shape({}),\n        children: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n        placeholderTextColor: ColorPropType, // deprecated\n        onOpen: PropTypes.func,\n        useNativeAndroidPickerStyle: PropTypes.bool,\n\n        // Custom Modal props (iOS only)\n        hideDoneBar: PropTypes.bool, // deprecated\n        doneText: PropTypes.string,\n        onDonePress: PropTypes.func,\n        onUpArrow: PropTypes.func,\n        onDownArrow: PropTypes.func,\n        onClose: PropTypes.func,\n\n        // Modal props (iOS only)\n        modalProps: PropTypes.shape({}),\n\n        // TextInput props (iOS only)\n        textInputProps: PropTypes.shape({}),\n\n        // Picker props\n        pickerProps: PropTypes.shape({}),\n\n        // Touchable Done props (iOS only)\n        touchableDoneProps: PropTypes.shape({}),\n\n        // Touchable wrapper props\n        touchableWrapperProps: PropTypes.shape({}),\n\n        // Custom Icon\n        Icon: PropTypes.func,\n        InputAccessoryView: PropTypes.func,\n    };\n\n    static defaultProps = {\n        value: undefined,\n        placeholder: {\n            label: 'Select an item...',\n            value: null,\n            color: '#9EA0A4',\n        },\n        disabled: false,\n        itemKey: null,\n        style: {},\n        children: null,\n        placeholderTextColor: '#C7C7CD', // deprecated\n        useNativeAndroidPickerStyle: true,\n        hideDoneBar: false, // deprecated\n        doneText: 'Done',\n        onDonePress: null,\n        onUpArrow: null,\n        onDownArrow: null,\n        onOpen: null,\n        onClose: null,\n        modalProps: {},\n        textInputProps: {},\n        pickerProps: {},\n        touchableDoneProps: {},\n        touchableWrapperProps: {},\n        Icon: null,\n        InputAccessoryView: null,\n    };\n\n    static handlePlaceholder({ placeholder }) {\n        if (isEqual(placeholder, {})) {\n            return [];\n        }\n        return [placeholder];\n    }\n\n    static getSelectedItem({ items, key, value }) {\n        let idx = items.findIndex((item) => {\n            if (item.key && key) {\n                return isEqual(item.key, key);\n            }\n            return isEqual(item.value, value);\n        });\n        if (idx === -1) {\n            idx = 0;\n        }\n        return {\n            selectedItem: items[idx] || {},\n            idx,\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // update items if items or placeholder prop changes\n        const items = RNPickerSelect.handlePlaceholder({\n            placeholder: nextProps.placeholder,\n        }).concat(nextProps.items);\n        const itemsChanged = !isEqual(prevState.items, items);\n\n        // update selectedItem if value prop is defined and differs from currently selected item\n        const { selectedItem, idx } = RNPickerSelect.getSelectedItem({\n            items,\n            key: nextProps.itemKey,\n            value: nextProps.value,\n        });\n        const selectedItemChanged =\n            !isEqual(nextProps.value, undefined) && !isEqual(prevState.selectedItem, selectedItem);\n\n        if (itemsChanged || selectedItemChanged) {\n            if (selectedItemChanged) {\n                nextProps.onValueChange(selectedItem.value, idx);\n            }\n\n            return {\n                ...(itemsChanged ? { items } : {}),\n                ...(selectedItemChanged ? { selectedItem } : {}),\n            };\n        }\n\n        return null;\n    }\n\n    constructor(props) {\n        super(props);\n\n        const items = RNPickerSelect.handlePlaceholder({\n            placeholder: props.placeholder,\n        }).concat(props.items);\n\n        const { selectedItem } = RNPickerSelect.getSelectedItem({\n            items,\n            key: props.itemKey,\n            value: props.value,\n        });\n\n        this.state = {\n            items,\n            selectedItem,\n            showPicker: false,\n            animationType: undefined,\n            orientation: 'portrait',\n            doneDepressed: false,\n        };\n\n        this.onUpArrow = this.onUpArrow.bind(this);\n        this.onDownArrow = this.onDownArrow.bind(this);\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onOrientationChange = this.onOrientationChange.bind(this);\n        this.setInputRef = this.setInputRef.bind(this);\n        this.togglePicker = this.togglePicker.bind(this);\n        this.renderInputAccessoryView = this.renderInputAccessoryView.bind(this);\n    }\n\n    onUpArrow() {\n        const { onUpArrow } = this.props;\n\n        this.togglePicker(false, onUpArrow);\n    }\n\n    onDownArrow() {\n        const { onDownArrow } = this.props;\n\n        this.togglePicker(false, onDownArrow);\n    }\n\n    onValueChange(value, index) {\n        const { onValueChange } = this.props;\n\n        onValueChange(value, index);\n\n        this.setState((prevState) => {\n            return {\n                selectedItem: prevState.items[index],\n            };\n        });\n    }\n\n    onOrientationChange({ nativeEvent }) {\n        this.setState({\n            orientation: nativeEvent.orientation,\n        });\n    }\n\n    setInputRef(ref) {\n        this.inputRef = ref;\n    }\n\n    getPlaceholderStyle() {\n        const { placeholder, placeholderTextColor, style } = this.props;\n        const { selectedItem } = this.state;\n\n        if (!isEqual(placeholder, {}) && selectedItem.label === placeholder.label) {\n            return {\n                ...defaultStyles.placeholder,\n                color: placeholderTextColor, // deprecated\n                ...style.placeholder,\n            };\n        }\n        return {};\n    }\n\n    triggerOpenCloseCallbacks() {\n        const { onOpen, onClose } = this.props;\n        const { showPicker } = this.state;\n\n        if (!showPicker && onOpen) {\n            onOpen();\n        }\n\n        if (showPicker && onClose) {\n            onClose();\n        }\n    }\n\n    togglePicker(animate = false, postToggleCallback) {\n        const { modalProps, disabled } = this.props;\n        const { showPicker } = this.state;\n\n        if (disabled) {\n            return;\n        }\n\n        if (!showPicker) {\n            Keyboard.dismiss();\n        }\n\n        const animationType =\n            modalProps && modalProps.animationType ? modalProps.animationType : 'slide';\n\n        this.triggerOpenCloseCallbacks();\n\n        this.setState(\n            (prevState) => {\n                return {\n                    animationType: animate ? animationType : undefined,\n                    showPicker: !prevState.showPicker,\n                };\n            },\n            () => {\n                if (postToggleCallback) {\n                    postToggleCallback();\n                }\n            }\n        );\n    }\n\n    renderPickerItems() {\n        const { items } = this.state;\n\n        return items.map((item) => {\n            return (\n                <Picker.Item\n                    label={item.label}\n                    value={item.value}\n                    key={item.key || item.label}\n                    color={item.color}\n                />\n            );\n        });\n    }\n\n    renderInputAccessoryView() {\n        const {\n            InputAccessoryView,\n            doneText,\n            hideDoneBar,\n            onUpArrow,\n            onDownArrow,\n            onDonePress,\n            style,\n            touchableDoneProps,\n        } = this.props;\n\n        const { doneDepressed } = this.state;\n\n        // deprecated\n        if (hideDoneBar) {\n            return null;\n        }\n\n        if (InputAccessoryView) {\n            return <InputAccessoryView testID=\"custom_input_accessory_view\" />;\n        }\n\n        return (\n            <View\n                style={[defaultStyles.modalViewMiddle, style.modalViewMiddle]}\n                testID=\"input_accessory_view\"\n            >\n                <View style={[defaultStyles.chevronContainer, style.chevronContainer]}>\n                    <TouchableOpacity\n                        activeOpacity={onUpArrow ? 0.5 : 1}\n                        onPress={onUpArrow ? this.onUpArrow : null}\n                    >\n                        <View\n                            style={[\n                                defaultStyles.chevron,\n                                style.chevron,\n                                defaultStyles.chevronUp,\n                                style.chevronUp,\n                                onUpArrow ? [defaultStyles.chevronActive, style.chevronActive] : {},\n                            ]}\n                        />\n                    </TouchableOpacity>\n                    <TouchableOpacity\n                        activeOpacity={onDownArrow ? 0.5 : 1}\n                        onPress={onDownArrow ? this.onDownArrow : null}\n                    >\n                        <View\n                            style={[\n                                defaultStyles.chevron,\n                                style.chevron,\n                                defaultStyles.chevronDown,\n                                style.chevronDown,\n                                onDownArrow\n                                    ? [defaultStyles.chevronActive, style.chevronActive]\n                                    : {},\n                            ]}\n                        />\n                    </TouchableOpacity>\n                </View>\n                <TouchableOpacity\n                    onPress={() => {\n                        this.togglePicker(true, onDonePress);\n                    }}\n                    onPressIn={() => {\n                        this.setState({ doneDepressed: true });\n                    }}\n                    onPressOut={() => {\n                        this.setState({ doneDepressed: false });\n                    }}\n                    hitSlop={{ top: 4, right: 4, bottom: 4, left: 4 }}\n                    testID=\"done_button\"\n                    {...touchableDoneProps}\n                >\n                    <View testID=\"needed_for_touchable\">\n                        <Text\n                            testID=\"done_text\"\n                            allowFontScaling={false}\n                            style={[\n                                defaultStyles.done,\n                                style.done,\n                                doneDepressed\n                                    ? [defaultStyles.doneDepressed, style.doneDepressed]\n                                    : {},\n                            ]}\n                        >\n                            {doneText}\n                        </Text>\n                    </View>\n                </TouchableOpacity>\n            </View>\n        );\n    }\n\n    renderIcon() {\n        const { style, Icon } = this.props;\n\n        if (!Icon) {\n            return null;\n        }\n\n        return (\n            <View\n                testID=\"icon_container\"\n                style={[defaultStyles.iconContainer, style.iconContainer]}\n            >\n                <Icon testID=\"icon\" />\n            </View>\n        );\n    }\n\n    renderTextInputOrChildren() {\n        const { children, style, textInputProps } = this.props;\n        const { selectedItem } = this.state;\n\n        const containerStyle =\n            Platform.OS === 'ios' ? style.inputIOSContainer : style.inputAndroidContainer;\n\n        if (children) {\n            return (\n                <View pointerEvents=\"box-only\" style={containerStyle}>\n                    {children}\n                </View>\n            );\n        }\n\n        return (\n            <View pointerEvents=\"box-only\" style={containerStyle}>\n                <TextInput\n                    testID=\"text_input\"\n                    style={[\n                        Platform.OS === 'ios' ? style.inputIOS : style.inputAndroid,\n                        this.getPlaceholderStyle(),\n                    ]}\n                    value={selectedItem.displayValue ? selectedItem.value : selectedItem.label}\n                    ref={this.setInputRef}\n                    editable={false}\n                    {...textInputProps}\n                />\n                {this.renderIcon()}\n            </View>\n        );\n    }\n\n    renderIOS() {\n        const { style, modalProps, pickerProps, touchableWrapperProps } = this.props;\n        const { animationType, orientation, selectedItem, showPicker } = this.state;\n\n        return (\n            <View style={[defaultStyles.viewContainer, style.viewContainer]}>\n                <TouchableOpacity\n                    testID=\"ios_touchable_wrapper\"\n                    onPress={() => {\n                        this.togglePicker(true);\n                    }}\n                    activeOpacity={1}\n                    {...touchableWrapperProps}\n                >\n                    {this.renderTextInputOrChildren()}\n                </TouchableOpacity>\n                <Modal\n                    testID=\"ios_modal\"\n                    visible={showPicker}\n                    transparent\n                    animationType={animationType}\n                    supportedOrientations={['portrait', 'landscape']}\n                    onOrientationChange={this.onOrientationChange}\n                    {...modalProps}\n                >\n                    <TouchableOpacity\n                        style={[defaultStyles.modalViewTop, style.modalViewTop]}\n                        testID=\"ios_modal_top\"\n                        onPress={() => {\n                            this.togglePicker(true);\n                        }}\n                    />\n                    {this.renderInputAccessoryView()}\n                    <View\n                        style={[\n                            defaultStyles.modalViewBottom,\n                            { height: orientation === 'portrait' ? 215 : 162 },\n                            style.modalViewBottom,\n                        ]}\n                    >\n                        <Picker\n                            testID=\"ios_picker\"\n                            onValueChange={this.onValueChange}\n                            selectedValue={selectedItem.value}\n                            {...pickerProps}\n                        >\n                            {this.renderPickerItems()}\n                        </Picker>\n                    </View>\n                </Modal>\n            </View>\n        );\n    }\n\n    renderAndroidHeadless() {\n        const { disabled, Icon, style, pickerProps, onOpen, touchableWrapperProps } = this.props;\n        const { selectedItem } = this.state;\n\n        return (\n            <TouchableOpacity\n                onPress={onOpen}\n                testID=\"android_touchable_wrapper\"\n                activeOpacity={1}\n                {...touchableWrapperProps}\n            >\n                <View style={style.headlessAndroidContainer}>\n                    {this.renderTextInputOrChildren()}\n                    <Picker\n                        style={[\n                            Icon ? { backgroundColor: 'transparent' } : {}, // to hide native icon\n                            defaultStyles.headlessAndroidPicker,\n                            style.headlessAndroidPicker,\n                        ]}\n                        testID=\"android_picker_headless\"\n                        enabled={!disabled}\n                        onValueChange={this.onValueChange}\n                        selectedValue={selectedItem.value}\n                        {...pickerProps}\n                    >\n                        {this.renderPickerItems()}\n                    </Picker>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n\n    renderAndroidNativePickerStyle() {\n        const { disabled, Icon, style, pickerProps } = this.props;\n        const { selectedItem } = this.state;\n\n        return (\n            <View style={[defaultStyles.viewContainer, style.viewContainer]}>\n                <Picker\n                    style={[\n                        Icon ? { backgroundColor: 'transparent' } : {}, // to hide native icon\n                        style.inputAndroid,\n                        this.getPlaceholderStyle(),\n                    ]}\n                    testID=\"android_picker\"\n                    enabled={!disabled}\n                    onValueChange={this.onValueChange}\n                    selectedValue={selectedItem.value}\n                    {...pickerProps}\n                >\n                    {this.renderPickerItems()}\n                </Picker>\n                {this.renderIcon()}\n            </View>\n        );\n    }\n\n    render() {\n        const { children, useNativeAndroidPickerStyle } = this.props;\n\n        if (Platform.OS === 'ios') {\n            return this.renderIOS();\n        }\n\n        if (children || !useNativeAndroidPickerStyle) {\n            return this.renderAndroidHeadless();\n        }\n\n        return this.renderAndroidNativePickerStyle();\n    }\n}\n\nexport { defaultStyles };\n"]},"metadata":{},"sourceType":"module"}