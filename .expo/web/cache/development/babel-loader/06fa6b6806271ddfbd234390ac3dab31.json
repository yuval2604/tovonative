{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/yuvalbeiser/Downloads/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/App.js\";\nimport React, { Component } from 'react';\nimport Navigation from \"./src/Navigation/index\";\nimport { AppLoading } from \"expo\";\nimport * as Font from 'expo-font';\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      fontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                \"OS_Regular\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n                \"OS_Bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n                \"OS_Light\": require(\"./assets/fonts/OpenSans-Light.ttf\"),\n                \"OS_SB\": require(\"./assets/fonts/OpenSans-SemiBold.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.fontLoaded) {\n        return React.createElement(Navigation, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          }\n        });\n      } else {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          }\n        });\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/yuvalbeiser/Downloads/codecanyon-B1UUUVLW-harrier-react-native-ecommerce-ui-kit-template/eCommerce2/App.js"],"names":["React","Component","Navigation","AppLoading","Font","App","state","fontLoaded","loadAsync","require","setState"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP;AACA,SAAQC,UAAR,QAA0B,MAA1B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IACqBC,G;;;AACnB,iBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAFY;AAKb;;;;;;;;;;+CAEOH,IAAI,CAACI,SAAL,CAAe;AACnB,8BAAeC,OAAO,uCADH;AAEnB,2BAAYA,OAAO,oCAFA;AAGnB,4BAAaA,OAAO,qCAHD;AAInB,yBAAUA,OAAO;AAJE,eAAf,C;;;AAMN,mBAAKC,QAAL,CAAc;AAAEH,gBAAAA,UAAU,EAAE;AAAd,eAAd;;;;;;;;;;;6BAEO;AACP,UAAI,KAAKD,KAAL,CAAWC,UAAf,EAA2B;AACzB,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AACL,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;;EAtB8BN,S;;SAAZI,G","sourcesContent":["import React, { Component } from 'react'\nimport Navigation from './src/Navigation/index'\nimport {AppLoading } from \"expo\";\nimport * as Font from 'expo-font';\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fontLoaded: false\n    };\n  }\n  async componentDidMount() {\n    await Font.loadAsync({\n      \"OS_Regular\" : require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n      \"OS_Bold\" : require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n      \"OS_Light\" : require(\"./assets/fonts/OpenSans-Light.ttf\"),\n      \"OS_SB\" : require(\"./assets/fonts/OpenSans-SemiBold.ttf\"),\n    });\n    this.setState({ fontLoaded: true });\n  }\n  render() {\n    if (this.state.fontLoaded) {\n      return <Navigation />;\n    } else {\n      return <AppLoading />;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}